version: '3.7'
services:

  service1:
    container_name: service1
    build : service
    environment:
      SCOPE_EVENT_METRIC: "false"
      SCOPE_EVENT_HTTP: "true"
      SCOPE_EVENT_HTTP_HEADER: ".*"
      SCOPE_EVENT_NET: "false"
      SCOPE_EVENT_FS: "false"
      SCOPE_EVENT_CONSOLE: "false"
      SCOPE_METRIC_FS: "false"
      SCOPE_METRIC_NET: "true"
      SCOPE_METRIC_PROC: "false"
      SCOPE_METRIC_HTTP: "false"
      SCOPE_METRIC_ENABLE: "false"
      SCOPE_CRIBL_ENABLE: "false"
      SCOPE_EVENT_DEST: "${APPSCOPE_DEST:-tcp://cribl1:10092}"
      SCOPE_TAG_container_name: "service1"
    command: ["/usr/local/bin/ldscope", "--", "python3", "main.py", "--port", "${SERVICE_1_PORT:-1234}"]
    networks:
      - service1
      - web
    depends_on:
      - cribl1

  client_normal:
    container_name: client_normal
    build : client
    command: ["python3", "main.py", "--variant", "valid_req", "--dest", "service1:${SERVICE_1_PORT:-1234}"]
    networks:
      - web

  client_attacker1:
    container_name: client_attacker1
    build : client
    command: ["python3", "main.py", "--variant", "header_invalid", "--dest", "service1:${SERVICE_1_PORT:-1234}"]
    networks:
      - web

  client_attacker2:
    container_name: client_attacker2
    build : client
    command: ["python3", "main.py", "--variant", "get_req_body", "--dest", "service1:${SERVICE_1_PORT:-1234}"]
    networks:
      - web

  http_proxy1:
    container_name: http_proxy1
    build : http_proxy
    command: ["python3", "main.py"]
    networks:
      - service1

  cribl1:
    image: "cribl/cribl:${CRIBL_VERSION:-3.5.2}"
    container_name: cribl1
    ports:
      - "${CRIBL_HOST_PORT:-9000}:9000"
    networks:
      - service1

  graf1:
    image: grafana/grafana:latest
    container_name: graf1
    environment:
      # GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/var/lib/grafana/dashboards/appscope.json"
      GF_SECURITY_ADMIN_PASSWORD: "scopedemo"
      GF_INSTALL_PLUGINS: "hamedkarbasi93-nodegraphapi-datasource"
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "hamedkarbasi93-nodegraphapi-datasource"
    ports:
      - "3000:3000"
    # volumes:
    #   - ./volumes/grafana:/var/lib/grafana
    networks:
      - service1
    # user: '0'

  splunk1:
    image: "splunk/splunk:${SPLUNK_VERSION:-8.2.6}"
    container_name: splunk1
    ports:
      - "${SPLUNK_HTTP_PORT:-8000}:${SPLUNK_HTTP_PORT:-8000}"
      - "${SPLUNK_ADMIN_PORT:-8089}:${SPLUNK_ADMIN_PORT:-8089}"
      - "${SPLUNK_S2S_PORT:-9997}:${SPLUNK_S2S_PORT:-9997}"
    environment:
      SPLUNK_START_ARGS: "--accept-license"
      SPLUNK_PASSWORD: "scopedemo"
    networks:
      - service1
    volumes:
      - ./volumes/splunk/HTTPHeaderDemo:/opt/splunk/etc/apps/HTTPHeaderDemo

  es1:
    image: "docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION:-8.3.3}"
    container_name: es1
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "${ES_HOST_PORT:-9200}:9200"
      - 9300:9300
    networks:
      - service1

  kib1:
    image: "docker.elastic.co/kibana/kibana:${KIBANA_VERSION:-8.3.3}"
    container_name: kib1
    environment:
      - ELASTICSEARCH_HOSTS=http://es1:9200
    ports:
      - "${KIBANA_HOST_PORT:-5601}:5601"
    depends_on:
      - es1
    networks:
      - service1

volumes:
  elasticsearch-data:
    driver: local

networks:
  web:
    driver: bridge
  service1:
    driver: bridge
